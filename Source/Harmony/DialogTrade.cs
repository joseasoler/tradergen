using System.Collections.Generic;
using HarmonyLib;
using RimWorld;
using TG.TraderKind;
using Verse;

namespace TG.Harmony
{
	/// <summary>
	/// Patches the trade dialog to take into account TraderGen additions.
	/// </summary>
	[HarmonyPatch]
	public static class DialogTrade
	{
		/// <summary>
		/// Returns a TraderGen trader label to use in the trade dialog.
		/// </summary>
		/// <param name="originalLabel">Original label. This method is just ignoring it.</param>
		/// <returns>New label to use.</returns>
		public static TaggedString TaggedLabel(TaggedString originalLabel)
		{
			return Util.Label(TradeSession.trader);
		}

		[HarmonyTranspiler]
		[HarmonyPatch(typeof(Dialog_Trade), nameof(Dialog_Trade.DoWindowContents))]
		private static IEnumerable<CodeInstruction> InjectSpecializations(IEnumerable<CodeInstruction> instructions)
		{
			var labelCapGetter = AccessTools.PropertyGetter(typeof(Def), nameof(Def.LabelCap));

			foreach (var code in instructions)
			{
				yield return code;
				if (code.Calls(labelCapGetter))
				{
					// Will swallow the label generated by the original code and replace it with TraderGen's label.
					yield return CodeInstruction.Call(typeof(DialogTrade), nameof(TaggedLabel));
				}
			}
		}
	}
}