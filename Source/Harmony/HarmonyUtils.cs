using System.Collections.Generic;
using System.Linq;
using HarmonyLib;
using RimWorld;
using TraderGen.TraderKind;
using Verse;

namespace TraderGen.Harmony
{
	/// <summary>
	/// Utilities used by TraderGen harmony patching.
	/// </summary>
	public static class HarmonyUtils
	{
		// PackageIDs of the Trader Ships mod and its re-textures.
		private static readonly string[] TraderShipMods =
		{
			"automatic.traderships", // Trader Ships
			"steampunk.tradeships", // Steampunk: Trader Airships
			"rimeffect.themistraders" // Rim-Effect: Themis Traders
		};

		/// <summary>
		/// Lazily initialized value storing if Trader Ships or any of its re-textures are active.
		/// </summary>
		private static bool? _traderShipsEnabled;

		/// <summary>
		/// Returns true if the Trader Ships mod or any of its re-textures are being used.
		/// </summary>
		/// <returns>True if any of the mentioned mods are being used.</returns>
		public static bool TraderShipsEnabled()
		{
			if (_traderShipsEnabled == null)
			{
				_traderShipsEnabled = LoadedModManager.RunningMods.Any(pack => TraderShipMods.Contains(pack.PackageId));
			}

			return (bool) _traderShipsEnabled;
		}

		/// <summary>
		/// Lazily initialized value tracking if the Trade UI revised mod is active.
		/// </summary>
		private static bool? _tradeUIRevisedActive;

		/// <summary>
		/// Returns true if the Trade UI revised mod is being used.
		/// </summary>
		/// <returns>True if any of the mentioned mods are being used.</returns>
		public static bool TradeUIRevisedActive()
		{
			if (_tradeUIRevisedActive == null)
			{
				_tradeUIRevisedActive = LoadedModManager.RunningMods.Any(pack => pack.PackageId == "hobtook.tradeui");
			}

			return (bool) _tradeUIRevisedActive;
		}

		/// <summary>
		/// Returns a TraderGen trader label to use in the trade dialog.
		/// </summary>
		/// <param name="originalLabel">Original label. This method is just ignoring it.</param>
		/// <returns>New label to use.</returns>
		public static TaggedString TaggedLabel(TaggedString originalLabel)
		{
			return Util.Label(TradeSession.trader);
		}

		/// <summary>
		/// Replaces calls to Def.LabelCap with a label with extra TraderGen information.
		/// </summary>
		/// <param name="instructions"></param>
		/// <returns></returns>
		public static IEnumerable<CodeInstruction> AddSpecializationsToTraderLabel(
			IEnumerable<CodeInstruction> instructions)
		{
			var labelCapGetter = AccessTools.PropertyGetter(typeof(Def), nameof(Def.LabelCap));

			foreach (var code in instructions)
			{
				yield return code;
				if (code.Calls(labelCapGetter))
				{
					// Will swallow the label generated by the original code and replace it with TraderGen's label.
					yield return CodeInstruction.Call(typeof(HarmonyUtils), nameof(TaggedLabel));
				}
			}
		}
	}
}